openapi: 3.0.0
info:
  title: COGENT API
  description: API for Code Organization and Generation Enhancement Tool
  version: 1.0.0
  contact:
    name: COGENT Support
    email: support@usecogent.io

servers:
  - url: https://api.usecogent.io/api/v1
    description: Production server
  - url: http://localhost:8000/api/v1
    description: Development server

security:
  - cookieAuth: []
  - apiKeyAuth: []

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: OAuth login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Successful login
          headers:
            Set-Cookie:
              description: HTTP-only cookies for access and refresh tokens
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Clear authentication cookies
      responses:
        200:
          description: Successfully logged out
          headers:
            Set-Cookie:
              description: Cleared authentication cookies
              schema:
                type: string

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh access token using refresh token
      security:
        - cookieAuth: []
      responses:
        200:
          description: Token refreshed successfully
          headers:
            Set-Cookie:
              description: New access token cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

  /projects:
    get:
      tags: [Projects]
      summary: List user's projects
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        200:
          description: List of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      tags: [Projects]
      summary: Create new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        201:
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'

  /projects/{projectId}:
    get:
      tags: [Projects]
      summary: Get project details
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Projects]
      summary: Update project
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        200:
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Projects]
      summary: Delete project
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        204:
          description: Project deleted successfully
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /projects/{projectId}/documents:
    get:
      tags: [Documents]
      summary: List project documents
      parameters:
        - $ref: '#/components/parameters/projectId'
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 200
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: path
          in: query
          description: Filter by file path prefix
          schema:
            type: string
      responses:
        200:
          description: List of documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    post:
      tags: [Documents]
      summary: Create or update document
      security:
        - apiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentRequest'
      responses:
        200:
          description: Document updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        201:
          description: Document created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /projects/{projectId}/search:
    post:
      tags: [Search]
      summary: Search project documents
      security:
        - cookieAuth: []
        - apiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/SearchResult'
                  total:
                    type: integer
                  query:
                    type: string
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /user/profile:
    get:
      tags: [User]
      summary: Get user profile
      responses:
        200:
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'

    put:
      tags: [User]
      summary: Update user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'

  /user/usage:
    get:
      tags: [User]
      summary: Get usage statistics
      parameters:
        - name: from
          in: query
          description: Start date (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: End date (ISO 8601)
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: Usage statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageStats'
        401:
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: access_token
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  parameters:
    projectId:
      name: projectId
      in: path
      required: true
      description: Project UUID
      schema:
        type: string
        format: uuid

  schemas:
    User:
      type: object
      required: [id, email, createdAt]
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
          nullable: true
        githubId:
          type: string
          nullable: true
        googleId:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time

    Project:
      type: object
      required: [id, name, userId, apiKey, createdAt]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        userId:
          type: string
          format: uuid
        repoUrl:
          type: string
          nullable: true
        apiKey:
          type: string
        createdAt:
          type: string
          format: date-time

    Document:
      type: object
      required: [id, projectId, filePath, content, summary, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        filePath:
          type: string
        content:
          type: string
        summary:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    SearchResult:
      type: object
      required: [documentId, filePath, content, relevanceScore]
      properties:
        documentId:
          type: string
          format: uuid
        filePath:
          type: string
        content:
          type: string
          description: Relevant excerpt from document
        relevanceScore:
          type: number
          format: float
          minimum: 0
          maximum: 1

    LoginRequest:
      type: object
      required: [provider, code]
      properties:
        provider:
          type: string
          enum: [github, google]
        code:
          type: string
          description: OAuth authorization code

    LoginResponse:
      type: object
      required: [user, expiresAt]
      properties:
        user:
          $ref: '#/components/schemas/User'
        expiresAt:
          type: string
          format: date-time
          description: Access token expiration time

    RefreshResponse:
      type: object
      required: [expiresAt]
      properties:
        expiresAt:
          type: string
          format: date-time
          description: New access token expiration time

    CreateProjectRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        repoUrl:
          type: string
          nullable: true

    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        repoUrl:
          type: string
          nullable: true

    CreateDocumentRequest:
      type: object
      required: [filePath, content, summary]
      properties:
        filePath:
          type: string
        content:
          type: string
        summary:
          type: string

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
          maxLength: 100

    SearchRequest:
      type: object
      required: [query]
      properties:
        query:
          type: string
          minLength: 1
        limit:
          type: integer
          default: 10
          minimum: 1
          maximum: 50
        offset:
          type: integer
          default: 0
          minimum: 0

    UsageStats:
      type: object
      required: [totalTokens, totalCost, documentsGenerated, searchesPerformed]
      properties:
        totalTokens:
          type: integer
        totalCost:
          type: number
          format: float
        documentsGenerated:
          type: integer
        searchesPerformed:
          type: integer
        dailyUsage:
          type: array
          items:
            type: object
            required: [date, tokens, cost]
            properties:
              date:
                type: string
                format: date
              tokens:
                type: integer
              cost:
                type: number
                format: float

    Error:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

tags:
  - name: Authentication
    description: OAuth and token management
  - name: Projects
    description: Project management operations
  - name: Documents
    description: Document creation and retrieval
  - name: Search
    description: Document search functionality
  - name: User
    description: User profile and usage